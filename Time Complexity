-- Agenda
    Comparing functions
    Calculating Big Oh
    Comparing Algorithms
    Problem Constraints
    Notations

Hierarchy of Functions
    Constant: e.g. : 1,100,10^500
    logarithms: e.g. : log a (base b)
    Polynomials: x,x^2,x^3 .. sqrt(N), N^1/2 ..
    Exponential: 2^N, 3^N, 1.1^N
    Factorials: n!
    UnNamed  : N^N

   Constants < logarithms < Polynomials < Exponential < Factorials < UnNamed

 To run code faster we need less iterations

 Suppose we have an function
    def solve():
        ToDo..

 No. Of Iterations in this functions : 3*2^N + 50*N^3 + 30*N^2+ 7*log(N) + 200
 For Time complexity we only need to consider the largest iteration,
 excluding the constant in multiplier and addition : 2^N

Q. f(n) = 3N + 6NlogN + 10^3
Find O(f(n)) = ?  Big-Oh of f(n) = ?
Ans : O(f(n)) = NlogN

Explanation : N Vs. NlogN which is Larger
    N.1 Vs N.logN
    if we exclude N in multiple, then logN will be greater than 1(constant)
   Hence NlogN is greater

 Q. f(n) = 10^3
 Find O(f(n)) = ?
 Answer : O(1)
 Explanation : Constant will always have 1 as a complexity

Big-Oh is used to compare the performance of Algorithms.

Function Performance Chart
	                        N --->
f(N)	                    10	100	1000 10000	100000	1000000
1	                        1	 1	 1    1     	1	   1	Best Algorithm
log(N)[base 2]	            3	 6	 9	 13     	16	   19
sqrt(N)	                    3	 10  31	 100	   316	 1000
N	                       10	100	1000 10000	 100000	 1000000
N^2	                       10^2 10^4 10^5 10^6   10^7     10^8
N^3	                       1000	              1000000	1000000000	1000000000000	1000000000000000	1000000000000000000
2^N	1024	              1267650600228230000000000000000    	1.07151E+301	2^1000	2^100000	2^100000
3^N	6 X 10^4	-	-	-	-	-
N!	3 Million	-	-	-	-	-
N^N	10 Billion	-	-	-	-	-


Worst Case Complexity

def solve(N):
    if n%2 == 0:
        for i in range(N):
            print(i)
    else:
        for i in range(N):
            for j in range(N):
                print(i+j)

It would have time complexity of n+n^2, i.e. O(n^2), if there is no "IF" conditional statement.
So, If I break down the above I will get 2 different complexities
    For Even : O(N)
    Otherwise : O(N^2)
 Here we have to be pessimistic, and consider the worst case , Time Complexity = O(N^2)


Problem Constraints
    Input Constraints:
    We have seen in Hacker Earth, Hacker Rank or Leetcode, some input constraints are provided
    Input Constraints : N<=10^6 --> 10^6 iterations / sec.
    or -10^18 <= A[i] <= 10^18

  From seeing above chart we can say, our code/solution will work/execute fine or not

   If code doesn't finish in 1sec --> Time Limit Extended (TLE) error we will get.

  Input range decides the data type.
  In Python datatype is not required.

Notations:
    Big-Oh (o), Big Omga, Theta







